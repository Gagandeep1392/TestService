//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleClient.ServiceReference2 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Country", Namespace="http://schemas.datacontract.org/2004/07/TestService")]
    [System.SerializableAttribute()]
    public partial class Country : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryName {
            get {
                return this.CountryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryNameField, value) != true)) {
                    this.CountryNameField = value;
                    this.RaisePropertyChanged("CountryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Student", Namespace="http://schemas.datacontract.org/2004/07/TestService")]
    [System.SerializableAttribute()]
    public partial class Student : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Max1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Max2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Max3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Max4Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Max1 {
            get {
                return this.Max1Field;
            }
            set {
                if ((this.Max1Field.Equals(value) != true)) {
                    this.Max1Field = value;
                    this.RaisePropertyChanged("Max1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Max2 {
            get {
                return this.Max2Field;
            }
            set {
                if ((this.Max2Field.Equals(value) != true)) {
                    this.Max2Field = value;
                    this.RaisePropertyChanged("Max2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Max3 {
            get {
                return this.Max3Field;
            }
            set {
                if ((this.Max3Field.Equals(value) != true)) {
                    this.Max3Field = value;
                    this.RaisePropertyChanged("Max3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Max4 {
            get {
                return this.Max4Field;
            }
            set {
                if ((this.Max4Field.Equals(value) != true)) {
                    this.Max4Field = value;
                    this.RaisePropertyChanged("Max4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/OpenConnection", ReplyAction="http://tempuri.org/IService/OpenConnectionResponse")]
        void OpenConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/OpenConnection", ReplyAction="http://tempuri.org/IService/OpenConnectionResponse")]
        System.Threading.Tasks.Task OpenConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CloseConnection", ReplyAction="http://tempuri.org/IService/CloseConnectionResponse")]
        void CloseConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CloseConnection", ReplyAction="http://tempuri.org/IService/CloseConnectionResponse")]
        System.Threading.Tasks.Task CloseConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddCountry", ReplyAction="http://tempuri.org/IService/AddCountryResponse")]
        void AddCountry(ConsoleClient.ServiceReference2.Country country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddCountry", ReplyAction="http://tempuri.org/IService/AddCountryResponse")]
        System.Threading.Tasks.Task AddCountryAsync(ConsoleClient.ServiceReference2.Country country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCountriesAdded", ReplyAction="http://tempuri.org/IService/GetCountriesAddedResponse")]
        System.Collections.Generic.List<ConsoleClient.ServiceReference2.Country> GetCountriesAdded();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCountriesAdded", ReplyAction="http://tempuri.org/IService/GetCountriesAddedResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ConsoleClient.ServiceReference2.Country>> GetCountriesAddedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        string GetData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMessage", ReplyAction="http://tempuri.org/IService/GetMessageResponse")]
        string GetMessage(string sName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMessage", ReplyAction="http://tempuri.org/IService/GetMessageResponse")]
        System.Threading.Tasks.Task<string> GetMessageAsync(string sName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAverage", ReplyAction="http://tempuri.org/IService/GetAverageResponse")]
        string GetAverage(ConsoleClient.ServiceReference2.Student s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAverage", ReplyAction="http://tempuri.org/IService/GetAverageResponse")]
        System.Threading.Tasks.Task<string> GetAverageAsync(ConsoleClient.ServiceReference2.Student s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSortArray", ReplyAction="http://tempuri.org/IService/GetSortArrayResponse")]
        System.Collections.Generic.List<int> GetSortArray(System.Collections.Generic.List<int> arr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSortArray", ReplyAction="http://tempuri.org/IService/GetSortArrayResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<int>> GetSortArrayAsync(System.Collections.Generic.List<int> arr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTopper", ReplyAction="http://tempuri.org/IService/GetTopperResponse")]
        ConsoleClient.ServiceReference2.Student GetTopper(System.Collections.Generic.List<ConsoleClient.ServiceReference2.Student> s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTopper", ReplyAction="http://tempuri.org/IService/GetTopperResponse")]
        System.Threading.Tasks.Task<ConsoleClient.ServiceReference2.Student> GetTopperAsync(System.Collections.Generic.List<ConsoleClient.ServiceReference2.Student> s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCountries", ReplyAction="http://tempuri.org/IService/GetCountriesResponse")]
        System.Collections.Generic.List<ConsoleClient.ServiceReference2.Country> GetCountries();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCountries", ReplyAction="http://tempuri.org/IService/GetCountriesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ConsoleClient.ServiceReference2.Country>> GetCountriesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : ConsoleClient.ServiceReference2.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<ConsoleClient.ServiceReference2.IService>, ConsoleClient.ServiceReference2.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void OpenConnection() {
            base.Channel.OpenConnection();
        }
        
        public System.Threading.Tasks.Task OpenConnectionAsync() {
            return base.Channel.OpenConnectionAsync();
        }
        
        public void CloseConnection() {
            base.Channel.CloseConnection();
        }
        
        public System.Threading.Tasks.Task CloseConnectionAsync() {
            return base.Channel.CloseConnectionAsync();
        }
        
        public void AddCountry(ConsoleClient.ServiceReference2.Country country) {
            base.Channel.AddCountry(country);
        }
        
        public System.Threading.Tasks.Task AddCountryAsync(ConsoleClient.ServiceReference2.Country country) {
            return base.Channel.AddCountryAsync(country);
        }
        
        public System.Collections.Generic.List<ConsoleClient.ServiceReference2.Country> GetCountriesAdded() {
            return base.Channel.GetCountriesAdded();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ConsoleClient.ServiceReference2.Country>> GetCountriesAddedAsync() {
            return base.Channel.GetCountriesAddedAsync();
        }
        
        public string GetData() {
            return base.Channel.GetData();
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync() {
            return base.Channel.GetDataAsync();
        }
        
        public string GetMessage(string sName) {
            return base.Channel.GetMessage(sName);
        }
        
        public System.Threading.Tasks.Task<string> GetMessageAsync(string sName) {
            return base.Channel.GetMessageAsync(sName);
        }
        
        public string GetAverage(ConsoleClient.ServiceReference2.Student s) {
            return base.Channel.GetAverage(s);
        }
        
        public System.Threading.Tasks.Task<string> GetAverageAsync(ConsoleClient.ServiceReference2.Student s) {
            return base.Channel.GetAverageAsync(s);
        }
        
        public System.Collections.Generic.List<int> GetSortArray(System.Collections.Generic.List<int> arr) {
            return base.Channel.GetSortArray(arr);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<int>> GetSortArrayAsync(System.Collections.Generic.List<int> arr) {
            return base.Channel.GetSortArrayAsync(arr);
        }
        
        public ConsoleClient.ServiceReference2.Student GetTopper(System.Collections.Generic.List<ConsoleClient.ServiceReference2.Student> s) {
            return base.Channel.GetTopper(s);
        }
        
        public System.Threading.Tasks.Task<ConsoleClient.ServiceReference2.Student> GetTopperAsync(System.Collections.Generic.List<ConsoleClient.ServiceReference2.Student> s) {
            return base.Channel.GetTopperAsync(s);
        }
        
        public System.Collections.Generic.List<ConsoleClient.ServiceReference2.Country> GetCountries() {
            return base.Channel.GetCountries();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ConsoleClient.ServiceReference2.Country>> GetCountriesAsync() {
            return base.Channel.GetCountriesAsync();
        }
    }
}
